*, *::after, *::before {

    box-sizing: border-box;
}

:root {
    --cell-size: 100px;
    --mark-size: calc(var(--cell-size) * .9);
}

body{
    margin: 0;
    background-color: black;
}

.board{

    width:  100vw;
    /* We have a width od 100 view-width of 1000, and a height of 100 view height */
    height: 100vh;
    display: grid;
    justify-content: center;
    align-content: center;
    justify-items: center;
    align-items: center;
    grid-template-columns: repeat(3, auto)
}



.cell.x,
.cell.circle {
    cursor: not-allowed;
}


.cell{
    width: var(--cell-size);
    height: var(--cell-size);
    /* background-color: black; */
    border: 1px solid white;
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}


/* removes the border for the cells 
first child removes the top left, top middle, and the top right cell top border in the 
grid using a static method 

*/

.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
    border-top: none;
}

/* 
.cell:nth-child is a way of removing multiple cells 
in this case (3n + 1) looks that the cells, 1,4,and 7  
*/

.cell:nth-child(3n + 1) {
    border-left: none;
} 

/* 
.cell:nth-child is a way of removing multiple cells 
in this case (3n + 3) looks that the cells, 3,6,and 9  
*/

.cell:nth-child(3n + 3) {
    border-right: none;
}

 
.cell:nth-child(7),
.cell:nth-child(8),
.cell:last-child {
    border-bottom: none;
}

.cell.x::before,
.cell.x::after,
.cell.circle::before {
    background-color: white;    
}


.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::before {
    background-color: rgba(255, 253, 253, 0.664);

}

.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
    content: '';
    position: absolute;
    width: calc(var(--mark-size) * .15);
    height: var(--mark-size);
    /* background-color: black; */
}

.cell.x::before,
.board.x .cell:hover::before {
    transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:hover::after {
    transform: rotate(-45deg);
}


.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.cirlce):hover::before,
.board.circle .cell:not(.x):not(.cirlce):hover::after {
    content: '';
    position: absolute;
    border-radius: 50%;
    
}

.cell.circle::before,
.board.circle .cell:not(.x):not(.cirlce):hover::before {
    width: var(--mark-size);
    height: var(--mark-size);
    /* background-color: white;  */
}

.cell.circle::after,
.board.circle .cell:not(.x):not(.cirlce):hover::after {
    width: calc(var(--mark-size) * .7);
    height: calc(var(--mark-size) * .7);
    background-color: black;
}


.winning-message {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(26, 23, 23, 0.185);
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 3rem;
    flex-direction: column;
}


.winning-message button{
    font-size: 2rem;
    background-color: white;
    border: 1px solid black;
    padding : .25em .5em;
    cursor: pointer;
}


.winning-message button:hover {
    background-color: black;
    color: white;
    border-color: white;

}

.winning-message.show {
    display: flex;
}
